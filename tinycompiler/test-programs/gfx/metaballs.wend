main () {
    int POW2_24; // 2^24 precision
    int WIDTH;
    int HEIGHT;
    int iTime;
    int i; int j;

    // sin(x) = x * (1 + x^2 * (0.00761 * x^2 - 0.16605))
    // this formula works pretty well in the range [-pi/2, +pi/2]
    int sin24(int x) {
        int sign;
        if x>0 { sign = 1; } else { sign = -1; x = -x; }     //
        while x>+79060768 { x = x - 105414357; }             // reduce the argument to the acceptable range
        if x>26353589 { return sign*cos24(x - 26353589); }   //
        return sign*(x/4096)*((16777216 + (((x/4096)*(x/4096))/4096)*((((x/4096)*(x/4096))/131 - 2785856)/4096))/4096);
    }

    // cos(x) = 1 + x^2 * (0.03705 * x^2 - 0.49670))
    // this formula works pretty well in the range [-pi/2, +pi/2]
    int cos24(int x) {
        if x<0 { x = -x; }                             //
        while x>79060768 { x = x - 105414357; }        // reduce the argument to the acceptable range
        if x>26353589 { return -sin24(x - 26353589); } //
        return 16777216 + (((x/4096)*(x/4096))/4096)*((((x/4096)*(x/4096))/27 - 8333243)/4096);
    }

    // square root of a fixed-point number
    // stored in a 32 bit integer variable, shift is the precision
    int sqrt(int n, int shift) {
        int x;
        int x_old;
        int n_one;

        int abs(int x) {
            if x < 0 {
                return -x;
            } else {
                return x;
            }
        }

        if n > 2147483647/shift { // pay attention to potential overflows
            return 2 * sqrt(n / 4, shift);
        }
        x = shift; // initial guess 1.0, can do better, but oh well
        n_one = n * shift; // need to compensate for fixp division
        while true {
            x_old = x;
            x = (x + n_one / x) / 2;
            if abs(x - x_old) <= 1 {
                return x;
            }
        }
    }

    mainImage(int fragCoord_x, int fragCoord_y) { // kinda shadertoy naming :)
        int u; int v;
        int fragColor_r; int fragColor_g; int fragColor_b;
        int sdf;
        int a; int b; int c; int d; int e;
        int d1; int d2; int d3;

        int CLAMP(int x, int low, int high) {
            if x>high {
                return high;
            }
            if x<low {
                return low;
            }
            return x;
        }

        u = ((2*fragCoord_x - WIDTH )*POW2_24)/HEIGHT;
        v = ((2*fragCoord_y - HEIGHT)*POW2_24)/HEIGHT;

        a = sin24(iTime/2)-u;
        b = sin24(iTime/2)-v;
        c = cos24(iTime/2)-v;
        d = sin24(iTime/4)-u;
        e = sin24(iTime  )-v;
        d1 = ((POW2_24*6/10)/CLAMP(sqrt((a/4096)*(a/4096) + (b/4096)*(b/4096), POW2_24)/4096,100,10000))*4096; // linear motion
        d2 = ((POW2_24*6/10)/CLAMP(sqrt((a/4096)*(a/4096) + (c/4096)*(c/4096), POW2_24)/4096,100,10000))*4096; // circular motion
        d3 = ((POW2_24*6/10)/CLAMP(sqrt((d/4096)*(d/4096) + (e/4096)*(e/4096), POW2_24)/4096,100,10000))*4096; // wave

        sdf = d1 + d2 + d3 - (POW2_24*22)/10;

        fragColor_r = ((255*17*((sdf+POW2_24)/4096))/10)/4096;     // orange halo (red and green channels)
        fragColor_g = ((255*8*((sdf+POW2_24)/4096))/10)/4096;
        fragColor_b = 255; if sdf<0 { fragColor_b = 0; }
        print CLAMP(fragColor_r,0,255); print ";";
        print CLAMP(fragColor_g,0,255); print ";";
        print fragColor_b;
    }

    POW2_24 = 16777216;
    WIDTH  = 80;
    HEIGHT = 50;
    iTime  = 0;
    print "\033[2j\033[?25l"; // clear screen and hide cursor

    while true {
        print "\033[H"; // home
        j = 0;
        while j<HEIGHT {
            i = 0;
            while i<WIDTH {
                print "\033[48;2;"; mainImage(i, j+0); print "m";  // set background color
                print "\033[38;2;"; mainImage(i, j+1); print "m";  // set foreground color
                print "\xE2\x96\x83";                              // half-block Unicode symbol
                i = i + 1;
            }
            print "\033[49m\n";
            j = j + 2;
        }

        iTime = iTime + POW2_24/24;
        if iTime>POW2_24*100 { // 100 approx 32 pi :)
            iTime = 0;
        }
    }
}

